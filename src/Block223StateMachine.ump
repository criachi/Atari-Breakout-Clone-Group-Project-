class PlayedGame {
	// attribute name for state machine 
	gameStatus {
		// initial default state we go into 
		Idle {
			beginGame() [hasEnoughBlockAssignments()] / {
				initializeBlockAssignments(); //this copies over info from EXISTING blockAssignments to specificBlockAssignments	
			} -> Play;
			beginGame() [!hasEnoughBlockAssignments()] / {
				initializeBlockAssignments();
				putRandomBlocks();
			} -> Play;
		}
		Play {
			pause() -> Paused;
			moveBall [hitsPaddleOrWall()] / {} -> Play
			moveBall [hitsBlock() && isLastBlock() && isLastLevel()] -> IsOver
			moveBall [hitBlock() && isLastBlock()] -> Pause
			moveBall [hitsBlock()] -> Play 
			moveBall [isBallOutOfBounds() && (getNrLives == 0)] -> isOver
			moveBall [isBallOutOfBounds()] -> Pause
		}
		Paused {
			resume -> Play;
		}
		
		IsOver {
			gameOver -> Paused;
		}
		
	}
	
	private Boolean isLastLevel(){
	
	}
	
	private int getNrLives() {
	
	}
	
	private void start (){
	
	}
	
	private void resume() {
	
	}
	
	private Boolean isLastBlock() {
	
	}
	
	private void pause(){
	
	}
	
	private void gameOver() {
	
	}
	
	private Boolean isBallOutOfBounds(){
	
	}
	
	private void outOfBounds() {
	
	}
	
	private Boolean hitsBlock() {
	
	}
	
	private void moveBall() {
	
	}
	
	private Boolean hitsPaddleOrWall() {
	
	}
}
