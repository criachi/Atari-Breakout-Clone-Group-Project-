class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  //Haluk Calin - ball hit the wall or paddle
    
    private boolean hitPaddle(){
	 BouncePoint bp = calculateBouncePointPaddle();
	 if(bp == null) { 
		 return false;
     }
     setBounce(bp);
     return bp!=null;
  }

//Melis Malki = ball out of bounds method

  private boolean isOutOfBoundsAndLastLife() {
   	if (getLives() == 1){ 
     return isOutOfBounds();
     }
     return false;
  }
  //Melis Malki = ball out of bounds method
  
  private boolean isOutOfBounds() {
    if ( getCurrentBallY() > getCurrentPaddleY()){
    return true;
    }    
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitLastBlockAndLastLevel() {
    Game game = this.getGame();
    int nrLevels = game.numberOfLevels();
    this.setBounce(null);
    if(nrLevels == currentLevel) {
    	int nrBlocks = numberOfBlocks();
    	if(nrBlocks == 1) {
    		PlayedBlockAssignment block = this.getBlock(0);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		this.setBounce(bp);
    		return bp != null;
    	}
    }
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitLastBlock(){
    int nrBlocks = this.numberOfBlocks();
    this.setBounce(null);
    if(nrBlocks == 1) {
    	PlayedBlockAssignment block = this.getBlock(0);
    	BouncePoint bp = calculateBouncePointBlock(block);
    	this.setBounce(bp);
    	return bp != null;
    }
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitBlock() {
    int nrBlocks = this.numberOfBlocks();
    this.setBounce(null);
    for(int i = 0; i < nrBlocks; i++) {
    	PlayedBlockAssignment block = this.getBlock(i);
    	BouncePoint bp = calculateBouncePointBlock(block);
    	BouncePoint bounce = this.getBounce();
    	boolean closer = isCloser(bp, bounce);
    	if(closer) {
    		this.setBounce(bp);
    	}
    }
    return this.getBounce() != null;
  }
  
   //Haluk Calin - ball hit the wall or paddle
   
   private boolean hitWall(){
	BouncePoint bp = calculateBouncePointWall();
	 if(bp == null) { 
		 return false;
    }
    setBounce(bp);

    return bp != null;
  }

  
  // Antkin - doSetUp

  
  private void doSetup() {
    resetCurrentBallX();
	   	resetCurrentBallY();
	   	resetBallDirectionX();
	   	resetBallDirectionY();
	   	resetCurrentPaddleX();
	   	Game game = getGame();
	   	Random rand = new Random();
	   	
	   	Level level = game.getLevel(getCurrentLevel() - 1);
	   	
	   	for(BlockAssignment a : level.getBlockAssignments()) {
	   		new PlayedBlockAssignment((Game.WALL_PADDING + Block.SIZE + Game.COLUMNS_PADDING)* (a.getGridHorizontalPosition() - 1), Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1), a.getBlock(), this);
	   	}
	   	
	   	while(blocks.size() < game.getNrBlocksPerLevel()){
	   		boolean positionChosen = false;
	   		int x = rand.nextInt(BlockAssignment.maxNrHorizontalBlocks());
   			int y = rand.nextInt(BlockAssignment.maxNrVerticalBlocks());
   			x++;
   			y++;
	   		
   			while(positionChosen == false) {
   				if(level.findBlockAssignment(x, y) == null) {
   					positionChosen = true;
   				}
   				else {
   					if(x != (BlockAssignment.maxNrHorizontalBlocks())) {
   						x++;
   					}
   					else if(x == (BlockAssignment.maxNrHorizontalBlocks()) && y != (BlockAssignment.maxNrVerticalBlocks())) {
   						x = 1; 
   						y++;
   					}
   					else {
   						x = 1;
   						y = 1;
   					}
   				}
	   		}
   			
   			new PlayedBlockAssignment(x, y, game.getRandomBlock(), this);
	   	}
  }
  
  //Haluk Calin - ball hit the wall or paddle
  
  private void doHitPaddleOrWall(){  
    bounceBall();
   }


//Melis Malki = ball out of bounds method

  private void doOutOfBounds() {
     int lives = getLives();
     setLives (lives-1);
     resetCurrentBallX();
     resetCurrentBallY();
     resetBallDirectionX();
     resetBallDirectionY();
     resetCurrentPaddleX();
  }
  
  //Onur Cayci - ball hits block method
  
  private void doHitBlock() {
    int score = this.getScore();
    BouncePoint bounce = this.getBounce();
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    Block block = pblock.getBlock();
    int points = block.getPoints();
    this.setScore(score + points);
    pblock.delete();
    bounceBall();
  }
  
  //Onur Cayci - ball hits block method
  
  private void doHitBlockNextLevel() {
    doHitBlock();
    int level = this.getCurrentLevel();
    this.setCurrentLevel(level + 1);
    this.setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength() - (getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength()) / (getGame().numberOfLevels()-1)*(getCurrentLevel()-1));
    this.setWaitTime(INITIAL_WAIT_TIME * java.lang.Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), (getCurrentLevel()-1)));
  }

//Christina Riachi move Ball feature 
  private void doHitNothingAndNotOutOfBounds() {
    double x = this.getCurrentBallX();
    double y = this.getCurrentBallY();
    double dx = this.getBallDirectionX();
    double dy = this.getBallDirectionY();
    this.setCurrentBallX(x+dx);
    this.setCurrentBallY(y+dy);
  }
  
//Melis Malki = ball out of bounds method

  private void doGameOver(){
    Player p  = getPlayer();
    if ( p != null){
    	Game game = getGame();
    	HallOfFameEntry hof = new HallOfFameEntry (score,playername,p,game,block223);
    	game.setMostRecentEntry(hof);
    	}
    delete();
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean isCloser(BouncePoint first, BouncePoint second) {
  	if(first == null) {
  		return false;
  	}
  	if(second == null) {
  		return true;
  	}
  	double distance1 = java.lang.Math.sqrt(((first.getX() - getCurrentBallX())*(first.getX() - getCurrentBallX()))+((first.getY() - getCurrentBallY())*(first.getY() - getCurrentBallY())));
  	double distance2 = java.lang.Math.sqrt(((second.getX() - getCurrentBallX())*(second.getX() - getCurrentBallX()))+((second.getY() - getCurrentBallY())*(second.getY() - getCurrentBallY())));
  	if(distance1 < distance2) {
  		return true;
  	}
  	return false;
  }
  
  //Onur Cayci - ball hits block method
 
  private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block){
    double blockX = 25 * (block.getX() - 1) + 10; //top left corner x-coordinate of the block
  	double blockY = 22 * (block.getY() - 1) + 10; //top left corner y-coordinate of the block
  	java.awt.geom.Rectangle2D blk = new java.awt.geom.Rectangle2D.Double(blockX, blockY, 20, 20);
  	java.awt.geom.Ellipse2D ball = new java.awt.geom.Ellipse2D.Double(currentBallX + ballDirectionX, currentBallY + ballDirectionY, 10, 10);
  	java.awt.geom.Rectangle2D A = new java.awt.geom.Rectangle2D.Double(blockX, blockY - 5, 20, 5);
  	java.awt.geom.Rectangle2D B = new java.awt.geom.Rectangle2D.Double(blockX - 5, blockY, 5, 20);
  	java.awt.geom.Rectangle2D C = new java.awt.geom.Rectangle2D.Double(blockX + 20, blockY, 5, 20);
  	java.awt.geom.Rectangle2D D = new java.awt.geom.Rectangle2D.Double(blockX + 20, blockY + 20, 20, 5);
  	java.awt.geom.Rectangle2D E = new java.awt.geom.Rectangle2D.Double(blockX - 5, blockY - 5, 5, 5);
  	java.awt.geom.Rectangle2D F = new java.awt.geom.Rectangle2D.Double(blockX + 20, blockY - 5, 5, 5);
  	java.awt.geom.Rectangle2D G = new java.awt.geom.Rectangle2D.Double(blockX - 5, blockY + 20, 5, 5);
  	java.awt.geom.Rectangle2D H = new java.awt.geom.Rectangle2D.Double(blockX + 20, blockY + 20, 5, 5);
  	java.awt.geom.Line2D movement = new java.awt.geom.Line2D.Double(currentBallX, currentBallY, currentBallX + ballDirectionX, currentBallY + ballDirectionY);
  	
  	BouncePoint bp = null;
  	
  	double nextX = currentBallX + ballDirectionX;
	double nextY = currentBallY + ballDirectionY;
  	
  	if(!blk.getBounds().intersects(ball.getBounds())) {
  		return null;
  	}
  	
  	if(A.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(currentBallX + (ballDirectionX * (blockY-5-currentBallY) / ballDirectionY), blockY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		 if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
  	}
  	if(B.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(blockX-5, currentBallY + (ballDirectionY * (blockX-5-currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_X);
  		 if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
  	}
  	if(C.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(blockX+5,currentBallY + (ballDirectionY * (blockX+5-currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_Y);
  		 if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
  	}
  	if(D.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(currentBallX + (ballDirectionX * (blockY+25-currentBallY) / ballDirectionY), blockY + 25, BouncePoint.BounceDirection.FLIP_X);
  		 if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
  	}
  	if(E.intersectsLine(movement)) {
  		if(ballDirectionX > 0) {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY - 1 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		} else {
  			BouncePoint tmp = new BouncePoint(currentBallX - 1 - ballDirectionY / 10, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  	  		if(isCloser(tmp, bp)) {
  	  			bp = tmp;
  	  		}
  		}
  	}
  	if(F.intersectsLine(movement)) {
  		if(ballDirectionX > 0) {
  			BouncePoint tmp = new BouncePoint(currentBallX + 1 + ballDirectionY / 10, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		} else {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY + 1 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  	  		if(isCloser(tmp, bp)) {
  	  			bp = tmp;
  	  		}
  		}
  	}
  	if(G.intersectsLine(movement)) {
  		if(ballDirectionX > 0) {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY, BouncePoint.BounceDirection.FLIP_X);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		} else {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		}
  	}
  	if(H.intersectsLine(movement)) {
  		if(ballDirectionX > 0) {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		} else {
  			BouncePoint tmp = new BouncePoint(currentBallX, currentBallY, BouncePoint.BounceDirection.FLIP_X);
  			if(isCloser(tmp, bp)) {
  				bp = tmp;
  			}
  		}
  	}
  	if(bp != null && nextX == bp.getX() && nextY == bp.getY()) {
		   return null;
	   }
	   return bp;
   }
  
  //Haluk ball hits wall method
  
  private BouncePoint calculateBouncePointWall() {
	   java.awt.geom.Rectangle2D A = new java.awt.geom.Rectangle2D.Double(0, 0, 5, 385);
	   java.awt.geom.Rectangle2D B = new java.awt.geom.Rectangle2D.Double(5, 0, 380, 5);
	   java.awt.geom.Rectangle2D C = new java.awt.geom.Rectangle2D.Double(385, 0, 5, 385);
	   java.awt.geom.Line2D movement = new java.awt.geom.Line2D.Double(this.getCurrentBallX(), this.getCurrentBallY(), this.getCurrentBallX() + this.getBallDirectionX(), this.getCurrentBallY() + this.getBallDirectionY());
	   
	   double nextX = currentBallX + ballDirectionX;
	   double nextY = currentBallY + ballDirectionY;
	   
	   BouncePoint bp = null;
	   
	   //A&B corner
	   if(A.intersectsLine(movement) && B.intersectsLine(movement)) {
		   BouncePoint tmp = new BouncePoint(5, 5, BouncePoint.BounceDirection.FLIP_BOTH);
		   if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
	   }
	   //B&C Corner
	   if(C.intersectsLine(movement) && B.intersectsLine(movement)) {
		   BouncePoint tmp = new BouncePoint(385, 5, BouncePoint.BounceDirection.FLIP_BOTH);
		   if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
	   }
	   //A
	   if(A.intersectsLine(movement)) {
		   BouncePoint tmp = new BouncePoint(5, currentBallY + (ballDirectionY * (5-currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_X);
		   if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
	   }
	   //B
	   if(B.intersectsLine(movement)) {
		   BouncePoint tmp = new BouncePoint(currentBallX + (ballDirectionX * (5-currentBallY) / ballDirectionY), 5, BouncePoint.BounceDirection.FLIP_Y);
		   if(isCloser(tmp, bp)) {
			   bp = tmp;
		   }
	   }
	   //C
	   if(C.intersectsLine(movement)) {
		  BouncePoint tmp = new BouncePoint(385, currentBallY + (ballDirectionY * (385 - currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_X);
		  if(isCloser(tmp, bp)) {
			  bp = tmp;
		  }
	   }
	   if(bp != null && nextX == bp.getX() && nextY == bp.getY()) {
		   return null;
	   }
	   return bp;
	 }
  
  
private BouncePoint calculateBouncePointPaddle(){
	java.awt.geom.Rectangle2D paddle = new java.awt.geom.Rectangle2D.Double(currentPaddleX, currentPaddleY, currentPaddleLength, 5);
	java.awt.geom.Ellipse2D ball = new java.awt.geom.Ellipse2D.Double(currentBallX + ballDirectionX, currentBallY + ballDirectionY, 10, 10);
    java.awt.geom.Rectangle2D A = new java.awt.geom.Rectangle2D.Double(CurrentPaddleX, CurrentPaddleY - 5, currentPaddleLength, 5);
    java.awt.geom.Rectangle2D B = new java.awt.geom.Rectangle2D.Double(CurrentPaddleX - 5 , getCurrentPaddleY, 5, 5);
    java.awt.geom.Rectangle2D C = new java.awt.geom.Rectangle2D.Double(CurrentPaddleX + currentPaddleLength + 5, CurrentPaddleY, 5, 5);
    java.awt.geom.Rectangle2D E = new java.awt.geom.Rectangle2D.Double(currentPaddleX - 5, currentPaddleY - 5, 5, 5);
    java.awt.geom.Rectangle2D F = new java.awt.geom.Rectangle2D.Double(currentPaddleX + currentPaddleLength, currentPaddleY - 5, 5, 5);
    java.awt.geom.Line2D movement = new java.awt.geom.Line2D.Double(this.getCurrentBallX(), this.getCurrentBallY(), this.getCurrentBallX() + this.getBallDirectionX(), this.getCurrentBallY() + this.getBallDirectionY());
    
    double nextX = currentBallX + ballDirectionX;
	double nextY = currentBallY + ballDirectionY;
    
    BouncePoint bp = null;
    
    if(!paddle.getBounds().intersects(ball.getBounds())) {
    	return null;
    }
    
	//A   
  	if(A.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(currentBallX + (ballDirectionX * (currentPaddleY-5-currentBallY) / ballDirectionY), currentPaddleY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		if(isCloser(tmp, bp)) {
  			bp = tmp;
  		}
  	}
  	//B
  	if(B.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(currentPaddleX-5, currentBallY + (ballDirectionY * (currentPaddleX-5-currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_X);
  		if(isCloser(tmp, bp)) {
  			bp = tmp;
  		}
  	}
  	//C
  	if(C.intersectsLine(movement)) {
  		BouncePoint tmp = new BouncePoint(currentPaddleX+currentPaddleLength+5,currentBallY + (ballDirectionY * (currentPaddleX+currentPaddleLength+5-currentBallX) / ballDirectionX), BouncePoint.BounceDirection.FLIP_X);
  		if(isCloser(tmp, bp)) {
  			bp = tmp;
  		}
  	}
  	// compute the euclidean distance between A and B
    double LAB = java.lang.Math.sqrt((ballDirectionX * ballDirectionX)+(ballDirectionY * ballDirectionY));

    // compute the direction vector D from A to B
    double Dx = (ballDirectionX)/LAB;
    double Dy = (ballDirectionY)/LAB;

    // the equation of the line AB is x = Dx*t + Ax, y = Dy*t + Ay with 0 <= t <= LAB.

    // compute the distance between the points A and E, where
    // E is the point of AB closest the circle center (Cx, Cy)
    //For corner E
    double t = Dx*(currentPaddleX-currentBallX) + Dy*(currentPaddleY-currentBallY); 
    //For corner F
    double k = Dx*(currentPaddleX+currentPaddleLength-currentBallX) + Dy*(currentPaddleY-currentBallY);

    // compute the coordinates of the point E
    //for corner E
    double Ex = t * Dx + currentBallX;
    double Ey = t * Dy + currentBallY;
    //for corner F
    double Fx = k * Dx + currentBallX;
    double Fy = k * Dy + currentBallY;

    // compute the euclidean distance between E and C, for E
    double LEC = java.lang.Math.sqrt(((Ex-currentPaddleX)*(Ex-currentPaddleX))+((Ey-currentPaddleY)*(currentPaddleY)));
    //for F
    double LFC = java.lang.Math.sqrt(((Fx-currentPaddleX-currentPaddleLength)*(Fx-currentPaddleX-currentPaddleLength)+(Fy-currentPaddleY)*(Fy-currentPaddleY)));

    // test if the line intersects the circle
    if(LEC < 5) {
        // compute distance from t to circle intersection point
        double dt = java.lang.Math.sqrt( 25 - (LEC*LEC));

        // compute first intersection point
        double Gx = (t-dt)*Dx + currentBallX;
        double Gy = (t-dt)*Dy + currentBallY;
        // compute second intersection point
        double Hx = (t+dt)*Dx + currentBallX;
        double Hy = (t+dt)*Dy + currentBallY;
        if(ballDirectionX < 0) {
        	BouncePoint tmp1 = new BouncePoint(Gx, Gy, BouncePoint.BounceDirection.FLIP_Y);
        	BouncePoint tmp2 = new BouncePoint(Hx, Hy, BouncePoint.BounceDirection.FLIP_Y);
        	if(isCloser(tmp1, bp)) {
        		bp = tmp1;
        	}
        	else if(isCloser(tmp2, bp)) {
        		bp = tmp2;
        	}
        } else {
        	BouncePoint tmp1 = new BouncePoint(Fx, Fy, BouncePoint.BounceDirection.FLIP_X);
        	BouncePoint tmp2 = new BouncePoint(Gx, Gy, BouncePoint.BounceDirection.FLIP_X);
        	if(isCloser(tmp1, bp)) {
        		bp =tmp1;
        	}
        	else if (isCloser(tmp2, bp)) {
        		bp = tmp2;
        	}
        }
    }

    // else test if the line is tangent to circle
    else if( LEC == 5 ) {
        // tangent point to circle is E
    	if(ballDirectionX < 0) {
    		BouncePoint tmp = new BouncePoint(Ex, Ey, BouncePoint.BounceDirection.FLIP_Y);
    		if(isCloser(tmp, bp)) {
    			bp = tmp;
    		}
    	} else {
    		BouncePoint tmp = new BouncePoint(Ex, Ey, BouncePoint.BounceDirection.FLIP_X);
    		if(isCloser(tmp, bp)) {
    			bp = tmp;
    		}
    	}
    } else {
        // line doesn't touch circle
    	return null;
    }
    
    if(LFC < 5) {
        // compute distance from t to circle intersection point
        double dt = java.lang.Math.sqrt( 25 - (LFC*LFC));

        // compute first intersection point
        double Gx = (k-dt)*Dx + currentBallX;
        double Gy = (k-dt)*Dy + currentBallY;
        // compute second intersection point
        double Hx = (k+dt)*Dx + currentBallX;
        double Hy = (k+dt)*Dy + currentBallY;
        if(ballDirectionX < 0) {
        	BouncePoint tmp1 = new BouncePoint(Gx, Gy, BouncePoint.BounceDirection.FLIP_X);
        	BouncePoint tmp2 = new BouncePoint(Hx, Hy, BouncePoint.BounceDirection.FLIP_X);
        	if(isCloser(tmp1, bp)) {
        		bp = tmp1;
        	}
        	else if(isCloser(tmp2, bp)) {
        		bp = tmp2;
        	}
        } else {
        	BouncePoint tmp1 = new BouncePoint(Fx, Fy, BouncePoint.BounceDirection.FLIP_Y);
        	BouncePoint tmp2 = new BouncePoint(Gx, Gy, BouncePoint.BounceDirection.FLIP_Y);
        	if(isCloser(tmp1, bp)) {
        		bp =tmp1;
        	}
        	else if (isCloser(tmp2, bp)) {
        		bp = tmp2;
        	}
        }
    }

    // else test if the line is tangent to circle
    else if( LFC == 5 ) {
        // tangent point to circle is E
    	if(ballDirectionX < 0) {
    		BouncePoint tmp = new BouncePoint(Fx, Fy, BouncePoint.BounceDirection.FLIP_X);
    		if(isCloser(tmp, bp)) {
    			bp = tmp;
    		}
    	} else {
    		BouncePoint tmp = new BouncePoint(Fx, Fy, BouncePoint.BounceDirection.FLIP_Y);
    		if(isCloser(tmp, bp)) {
    			bp = tmp;
    		}
    	}
    } else {
        // line doesn't touch circle
    	return null;
    }

  	if(bp != null && nextX == bp.getX() && nextY == bp.getY()) {
		   return null;
	   }
  	return bp;
  }
  
 private void bounceBall() {
	   //FLIP_Y case
	   	BouncePoint.BounceDirection bd = this.bounce.getDirection();
	   	if(bd.equals(BouncePoint.BounceDirection.FLIP_Y)) {
	   		double in = bounce.getY() - currentBallY; //incoming distance
	   		double out = ballDirectionY - in; //outgoing distance
	   		if(out == 0) {
	   			currentBallX = bounce.getX();
	   			currentBallY = bounce.getY();
	   		}
	   		double DirectionX = ballDirectionX;
	   		double DirectionY = ballDirectionY;
	   		ballDirectionY = (-1)*DirectionY;
	   		if(DirectionX == 0) {
	   			ballDirectionX = 0.1 * java.lang.Math.abs(ballDirectionY);
	   		} else {
	   			ballDirectionX = DirectionX + (0.1 * java.lang.Math.abs(ballDirectionY));
	   		}
	   		currentBallY = bounce.getY() + (out/DirectionY * ballDirectionY);
	   		currentBallX = bounce.getX() + (out/DirectionY * ballDirectionX);
	   	}
	   	//FLIP_X case
	   	if(bd.equals(BouncePoint.BounceDirection.FLIP_X)) {
	   		double in = bounce.getX() - currentBallX;
	   		double out = ballDirectionX - in;
	   		if(out == 0) {
	   			currentBallX = bounce.getX();
	   			currentBallY = bounce.getY();
	   		}
	   		double DirectionX = ballDirectionX;
	   		double DirectionY = ballDirectionY;
	   		ballDirectionX = -DirectionX;
	   		if(DirectionY == 0) {
	   			ballDirectionY = 0.1 * java.lang.Math.abs(ballDirectionX);
	   		} else {
	   			ballDirectionY = DirectionY + (0.1 * java.lang.Math.abs(ballDirectionX));
	   		}
	   		currentBallX = bounce.getX() + (out/DirectionX * ballDirectionX);
	   		currentBallY = bounce.getY() + (out/DirectionX * ballDirectionY);
	   	}
	   	//FLIP_BOTH case
	   	if(bd.equals(BouncePoint.BounceDirection.FLIP_BOTH)) {
	   		double inX = bounce.getX() - currentBallX;
	   		double remX = ballDirectionX - inX;
	   		double inY = bounce.getY() - currentBallY;
	   		double remY = ballDirectionY - inY;
	   		if(remX == 0 && remY == 0) {
	   			currentBallX = bounce.getX();
	   			currentBallY = bounce.getY();
	   		}
	   		double DirectionX = ballDirectionX;
	   		double DirectionY = ballDirectionY;
	   		ballDirectionX = -DirectionX;
	   		ballDirectionY = -DirectionY;
	   		currentBallX = bounce.getX() + (remX/DirectionX * ballDirectionX);
	   		currentBallY = bounce.getY() + (remY/DirectionY * ballDirectionY);
	   	}
   }
  
}