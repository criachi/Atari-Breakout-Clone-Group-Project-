class PlayedGame {

  // State Machine
  
  playStatus {
    Ready {
      entry / { doSetup(); }
      play -> Moving;
    }
    Moving {
      pause -> Paused;
      move [hitPaddle()] / { doHitPaddleOrWall(); } -> Moving;
      move [isOutOfBoundsAndLastLife()] / { doOutOfBounds(); } -> GameOver;
      move [isOutOfBounds()] / { doOutOfBounds(); } -> Paused;
      move [hitLastBlockAndLastLevel()] / { doHitBlock(); } -> GameOver;
      move [hitLastBlock()] / { doHitBlockNextLevel(); } -> Ready;
      move [hitBlock()] / { doHitBlock(); } -> Moving;
      move [hitWall()] / { doHitPaddleOrWall(); } -> Moving;
      move / { doHitNothingAndNotOutOfBounds(); } -> Moving;
    }
    Paused {
      play -> Moving;
    }
    GameOver {
      entry / { doGameOver(); }
    }
  }
  
  // Guards
  
  //Haluk Calin - ball hit the wall or paddle
    
    private boolean hitPaddle(){
	 BouncePoint bp = calculateBouncePointPaddle();
	 if(bp == null) { 
		 return false;
     }
     setBounce(bp);
     return bp!=null;
  }

//Melis Malki = ball out of bounds method

  private boolean isOutOfBoundsAndLastLife() {
   	if (getLives() == 1){ 
     return isOutOfBounds();
     }
     return false;
  }
  //Melis Malki = ball out of bounds method
  
  private boolean isOutOfBounds() {
    if ( getCurrentBallY() > getCurrentPaddleY()){
    return true;
    }    
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitLastBlockAndLastLevel() {
    Game game = this.getGame();
    int nrLevels = game.numberOfLevels();
    this.setBounce(null);
    if(nrLevels == currentLevel) {
    	int nrBlocks = numberOfBlocks();
    	if(nrBlocks == 1) {
    		PlayedBlockAssignment block = this.getBlock(0);
    		BouncePoint bp = this.calculateBouncePointBlock(block);
    		this.setBounce(bp);
    		return bp != null;
    	}
    }
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitLastBlock(){
    int nrBlocks = this.numberOfBlocks();
    this.setBounce(null);
    if(nrBlocks == 1) {
    	PlayedBlockAssignment block = this.getBlock(0);
    	BouncePoint bp = calculateBouncePointBlock(block);
    	this.setBounce(bp);
    	return bp != null;
    }
    return false;
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean hitBlock() {
    int nrBlocks = this.numberOfBlocks();
    this.setBounce(null);
    for(int i = 0; i < nrBlocks; i++) {
    	PlayedBlockAssignment block = this.getBlock(i);
    	BouncePoint bp = calculateBouncePointBlock(block);
    	BouncePoint bounce = this.getBounce();
    	boolean closer = isCloser(bp, bounce);
    	if(closer) {
    		this.setBounce(bp);
    	}
    }
    return this.getBounce() != null;
  }
  
   //Haluk Calin - ball hit the wall or paddle
   
   private boolean hitWall(){
	BouncePoint bp = calculateBouncePointWall();
	 if(bp == null) { 
		 return false;
    }
    setBounce(bp);

    return bp != null;
  }

  
  // Antkin - doSetUp

  
  private void doSetup() {
    resetCurrentBallX();
	   	resetCurrentBallY();
	   	resetBallDirectionX();
	   	resetBallDirectionY();
	   	resetCurrentPaddleX();
	   	Game game = getGame();
	   	Random rand = new Random();
	   	
	   	Level level = game.getLevel(getCurrentLevel() - 1);
	   	
	   	for(BlockAssignment a : level.getBlockAssignments()) {
	   		new PlayedBlockAssignment((Game.WALL_PADDING + Block.SIZE + Game.COLUMNS_PADDING)* (a.getGridHorizontalPosition() - 1), Game.WALL_PADDING + (Block.SIZE + Game.ROW_PADDING) * (a.getGridVerticalPosition() - 1), a.getBlock(), this);
	   	}
	   	
	   	while(blocks.size() < game.getNrBlocksPerLevel()){
	   		boolean positionChosen = false;
	   		int x = rand.nextInt(BlockAssignment.maxNrHorizontalBlocks());
   			int y = rand.nextInt(BlockAssignment.maxNrVerticalBlocks());
   			x++;
   			y++;
	   		
   			while(positionChosen == false) {
   				if(level.findBlockAssignment(x, y) == null) {
   					positionChosen = true;
   				}
   				else {
   					if(x != (BlockAssignment.maxNrHorizontalBlocks())) {
   						x++;
   					}
   					else if(x == (BlockAssignment.maxNrHorizontalBlocks()) && y != (BlockAssignment.maxNrVerticalBlocks())) {
   						x = 1; 
   						y++;
   					}
   					else {
   						x = 1;
   						y = 1;
   					}
   				}
	   		}
   			
   			new PlayedBlockAssignment(x, y, game.getRandomBlock(), this);
	   	}
  }
  
  //Haluk Calin - ball hit the wall or paddle
  
  private void doHitPaddleOrWall(){  
    bounceBall();
   }


//Melis Malki = ball out of bounds method

  private void doOutOfBounds() {
     int lives = getLives();
     setLives (lives-1);
     resetCurrentBallX();
     resetCurrentBallY();
     resetBallDirectionX();
     resetBallDirectionY();
     resetCurrentPaddleX();
  }
  
  //Onur Cayci - ball hits block method
  
  private void doHitBlock() {
    int score = this.getScore();
    BouncePoint bounce = this.getBounce();
    PlayedBlockAssignment pblock = bounce.getHitBlock();
    Block block = pblock.getBlock();
    int points = block.getPoints();
    this.setScore(score + points);
    pblock.delete();
    bounceBall();
  }
  
  //Onur Cayci - ball hits block method
  
  private void doHitBlockNextLevel() {
    doHitBlock();
    int level = this.getCurrentLevel();
    this.setCurrentLevel(level + 1);
    this.setCurrentPaddleLength(getGame().getPaddle().getMaxPaddleLength() - (getGame().getPaddle().getMaxPaddleLength() - getGame().getPaddle().getMinPaddleLength()) / (getGame().numberOfLevels()-1)*(getCurrentLevel()-1));
    this.setWaitTime(INITIAL_WAIT_TIME * java.lang.Math.pow(getGame().getBall().getBallSpeedIncreaseFactor(), (getCurrentLevel()-1)));
  }

//Christina Riachi move Ball feature 
  private void doHitNothingAndNotOutOfBounds() {
    double x = this.getCurrentBallX();
    double y = this.getCurrentBallY();
    double dx = this.getBallDirectionX();
    double dy = this.getBallDirectionY();
    this.setCurrentBallX(x+dx);
    this.setCurrentBallY(y+dy);
  }
  
//Melis Malki = ball out of bounds method

  private void doGameOver(){
    Player p  = getPlayer();
    if ( p != null){
    	Game game = getGame();
    	HallOfFameEntry hof = new HallOfFameEntry (score,playername,p,game,block223);
    	game.setMostRecentEntry(hof);
    	}
    delete();
  }
  
  //Onur Cayci - ball hits block method
  
  private boolean isCloser(BouncePoint first, BouncePoint second) {
  	if(first == null) {
  		return false;
  	}
  	if(second == null) {
  		return true;
  	}
  	double distance1 = java.lang.Math.sqrt(((first.getX() - getCurrentBallX())*(first.getX() - getCurrentBallX()))+((first.getY() - getCurrentBallY())*(first.getY() - getCurrentBallY())));
  	double distance2 = java.lang.Math.sqrt(((second.getX() - getCurrentBallX())*(second.getX() - getCurrentBallX()))+((second.getY() - getCurrentBallY())*(second.getY() - getCurrentBallY())));
  	if(distance1 < distance2) {
  		return true;
  	}
  	return false;
  }
  
  //Onur Cayci - ball hits block method
 
  private BouncePoint calculateBouncePointBlock(PlayedBlockAssignment block) {
  	double blockX = 25 * (block.getX() - 1); //top left corner x-coordinate of the block
  	double blockY = 22 * (block.getY() - 1); //top left corner y-coordinate of the block
  	java.awt.geom.Rectangle2D rect = new java.awt.geom.Rectangle2D.Double(blockX, blockY, 30, 30);
  	java.awt.geom.Ellipse2D ball = new java.awt.geom.Ellipse2D.Double(this.getCurrentBallX() + this.getBallDirectionX(), this.getCurrentBallY() + this.getBallDirectionY(), 10, 10);
  	if(!rect.getBounds2D().intersects(ball.getBounds2D())) return null;
  	
  	if(blockY > this.getCurrentBallY()) {
  	//option A
  		if((this.getCurrentBallX() + this.getBallDirectionX()) != blockX || (this.getCurrentBallX() + this.getBallDirectionX()) != (blockX + 20)) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY - 5)/(2*currentBallY + ballDirectionY)), blockY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	//option E approaching from right
  		if((this.getCurrentBallX() + this.getBallDirectionX()) == blockX && (this.getCurrentBallX() + this.getBallDirectionX()) < this.getBallDirectionX()) { 
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY - 5)/(2*currentBallY + ballDirectionY)), blockY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	//option E approaching from left
  		if((currentBallX + ballDirectionX) == blockX && (currentBallX + ballDirectionX) > currentBallX) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY - 5)/(2*currentBallY + ballDirectionY)), blockY - 5, BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option F aproaching from right
  		if((this.getCurrentBallX() + this.getBallDirectionX()) == (blockX + 20) && (currentBallX + ballDirectionX) < currentBallX) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY - 5)/(2*currentBallY + ballDirectionY)), blockY - 5, BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option F approaching from left
  		if((currentBallX + ballDirectionX) == (blockX + 20) && (currentBallX + ballDirectionX) > currentBallX) {
  		return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY - 5)/(2*currentBallY + ballDirectionY)), blockY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	}
  	
  	//if the ball comes from the bottom
  	
  	if((blockY + 20) < this.getCurrentBallY()) {
  	//option D
  		if((this.getCurrentBallX() + this.getBallDirectionX()) != blockX || (this.getCurrentBallX() + this.getBallDirectionX()) != (blockX + 20)) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY + 25)/(2*currentBallY + ballDirectionY)), blockY + 25, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	//option G approaching from right
  		if((this.getCurrentBallX() + this.getBallDirectionX()) == blockX && (currentBallX + ballDirectionX) < currentBallX) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY + 25)/(2*currentBallY + ballDirectionY)), blockY + 25, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	//option E approaching from left
  		if((currentBallX + ballDirectionX) == blockX && (currentBallX + ballDirectionX) > currentBallX) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY + 25)/(2*currentBallY + ballDirectionY)), blockY + 25, BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option F aproaching from right
  		if((this.getCurrentBallX() + this.getBallDirectionX()) == (blockX + 20) && (currentBallX + ballDirectionX) < currentBallX) {
  			return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY + 25)/(2*currentBallY + ballDirectionY)), blockY + 25, BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option F approaching from left
  		if((currentBallX + ballDirectionX) == (blockX + 20) && (currentBallX + ballDirectionX) > currentBallX) {
  		return new BouncePoint(((2*currentBallX + ballDirectionX)*(blockY + 25)/(2*currentBallY + ballDirectionY)), blockY + 25, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	}
  	
  	//if the ball comes from the left
  	
  	if(blockX > this.getCurrentBallX()) {
  	//option B
  	if((this.getCurrentBallY() + this.getBallDirectionY()) != blockY || (this.getCurrentBallY() + this.getBallDirectionY()) != (blockY + 20)) {
  			return new BouncePoint(blockX - 5, this.getCurrentBallY() + this.getBallDirectionY(), BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option E
  		if((this.getCurrentBallY() + this.getBallDirectionY()) == blockY) { 
  			return new BouncePoint(blockX - 5, blockY - 5, BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option G
 		if((this.getCurrentBallY() + this.getBallDirectionY()) == (blockY + 20)) {
  			return new BouncePoint(blockX - 5, blockY + 25, BouncePoint.BounceDirection.FLIP_X);
  		}
  	}
  	
  	//if the ball comes from the right
  	
  	if(blockX + 20 < this.getCurrentBallX()) {
  	//option C
  		if((this.getCurrentBallY() + this.getBallDirectionY()) != blockY || (this.getCurrentBallY() + this.getBallDirectionY()) != (blockY + 20)) {
  			return new BouncePoint(blockX + 25, this.getCurrentBallY() + this.getBallDirectionY(), BouncePoint.BounceDirection.FLIP_X);
  		}
  	//option F
  		if((this.getCurrentBallY() + this.getBallDirectionY()) == blockY) { //might need to add extra if statement to better detect the bounce on the edge, it should be good so far without it
  			return new BouncePoint(blockX + 25, blockY - 5, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	//option H
  		if((this.getCurrentBallY() + this.getBallDirectionY()) == (blockY + 20)) {
  			return new BouncePoint(blockX + 25, blockY + 25, BouncePoint.BounceDirection.FLIP_Y);
  		}
  	}
  	return null;
  }
  
  //Haluk ball hits wall method
  
 private BouncePoint calculateBouncePointWall() {
	   java.awt.geom.Rectangle2D A = new java.awt.geom.Rectangle2D.Double(0, 0, 5, 385);
	   java.awt.geom.Rectangle2D B = new java.awt.geom.Rectangle2D.Double(5, 0, 380, 5);
	   java.awt.geom.Rectangle2D C = new java.awt.geom.Rectangle2D.Double(385, 0, 5, 385);
	   java.awt.geom.Line2D movement = new java.awt.geom.Line2D.Double(this.getCurrentBallX(), this.getCurrentBallY(), this.getCurrentBallX() + this.getBallDirectionX(), this.getCurrentBallY() + this.getBallDirectionY());
	   
	   //A&B corner
	   if(A.intersectsLine(movement) && B.intersectsLine(movement) && ballDirectionX < 0 && ballDirectionY < 0) {
		   return new BouncePoint(5, 5, BouncePoint.BounceDirection.FLIP_BOTH);
	   }
	   //B&C Corner
	   if(C.intersectsLine(movement) && B.intersectsLine(movement) && ballDirectionX > 0 && ballDirectionY < 0) {
		   return new BouncePoint(385, 5, BouncePoint.BounceDirection.FLIP_BOTH);
	   }
	   //A
	   if(A.intersectsLine(movement) && ballDirectionX < 0) {
		   return new BouncePoint(5, currentBallY + 2 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
	   }
	   //B
	   if(B.intersectsLine(movement) && ballDirectionY < 0) {
		   return new BouncePoint(currentBallX + 2 - ballDirectionY / 10, 5, BouncePoint.BounceDirection.FLIP_Y);
	   }
	   //C
	   if(C.intersectsLine(movement) && ballDirectionX > 0) {
		   return new BouncePoint(385, currentBallY + 2 + ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
	   }
	   return null;
	 }
  
  
 private BouncePoint calculateBouncePointPaddle(){
    java.awt.geom.Rectangle2D A = new java.awt.geom.Rectangle2D.Double(this.getCurrentPaddleX(), this.getCurrentPaddleY() - 5, currentPaddleLength, 5);
    java.awt.geom.Rectangle2D B = new java.awt.geom.Rectangle2D.Double(this.getCurrentPaddleX() - 5 , this.getCurrentPaddleY(), 5, 5);
    java.awt.geom.Rectangle2D C = new java.awt.geom.Rectangle2D.Double(this.getCurrentPaddleX() + currentPaddleLength + 5, this.getCurrentPaddleY(), 5, 5);
    java.awt.geom.Rectangle2D E = new java.awt.geom.Rectangle2D.Double(currentPaddleX - 5, currentPaddleY - 5, 5, 5);
    java.awt.geom.Rectangle2D F = new java.awt.geom.Rectangle2D.Double(currentPaddleX + currentPaddleLength, currentPaddleY - 5, 5, 5);
    java.awt.geom.Line2D movement = new java.awt.geom.Line2D.Double(this.getCurrentBallX(), this.getCurrentBallY(), this.getCurrentBallX() + this.getBallDirectionX(), this.getCurrentBallY() + this.getBallDirectionY());
    
	//A   
  	if(A.intersectsLine(movement) && ballDirectionY > 0) {
  		return new BouncePoint(currentBallX + 2 + ballDirectionY / 10, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  	}
  	//B
  	if(B.intersectsLine(movement) && ballDirectionX > 0) {
  		return new BouncePoint(currentBallX, currentBallY + 2 + ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  	}
  	//C
  	if(C.intersectsLine(movement) && ballDirectionX < 0) {
  		return new BouncePoint(currentBallX, currentBallY + 2 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  	}
  	//E left
  	if(E.intersectsLine(movement) && ballDirectionX > 0) {
  		return new BouncePoint(currentBallX, currentBallY - 1 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  	}
  	//E right
  	if(E.intersectsLine(movement) && ballDirectionX < 0) {
  		return new BouncePoint(currentBallX - 1 - ballDirectionY / 10, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  	}
  	//F left
  	if(F.intersectsLine(movement) && ballDirectionX > 0) {
  		return new BouncePoint(currentBallX + 1 + ballDirectionY / 10, currentBallY, BouncePoint.BounceDirection.FLIP_Y);
  	}
  	//F right
  	if(F.intersectsLine(movement) && ballDirectionX < 0) {
  		return new BouncePoint(currentBallX, currentBallY + 1 - ballDirectionX / 10, BouncePoint.BounceDirection.FLIP_X);
  	}
  	return null;
  }
  
  private void bounceBall() {
  //FLIP_Y case
  	BouncePoint.BounceDirection bd = this.bounce.getDirection();
  	if(bd.equals(BouncePoint.BounceDirection.FLIP_Y)) {
  		double in = bounce.getY() - currentBallY;
  		double rem = ballDirectionY - in;
  		if(rem == 0) {
  			currentBallX = bounce.getX();
  			currentBallY = bounce.getY();
  		}
  		double oldDirectionX = ballDirectionX;
  		double oldDirectionY = ballDirectionY;
  		ballDirectionY = (oldDirectionY * (-1));
  		if(oldDirectionX == 0) {
  			ballDirectionX = 0.1 * java.lang.Math.abs(ballDirectionY);
  		} else {
  			ballDirectionX = oldDirectionX + (java.lang.Math.signum(oldDirectionX) * 0.1 * java.lang.Math.abs(ballDirectionY));
  		}
  		currentBallX = bounce.getX() + rem/oldDirectionX * ballDirectionX;
  		currentBallY = bounce.getY() + rem/oldDirectionY * ballDirectionY;
  	}
  	//FLIP_X case
  	if(bd.equals(BouncePoint.BounceDirection.FLIP_X)) {
  		double in = bounce.getX() - currentBallX;
  		double rem = ballDirectionX - in;
  		if(rem == 0) {
  			currentBallX = bounce.getX();
  			currentBallY = bounce.getY();
  		}
  		double oldDirectionX = ballDirectionX;
  		double oldDirectionY = ballDirectionY;
  		ballDirectionX = (oldDirectionX * (-1));
  		if(oldDirectionY == 0) {
  			ballDirectionY = 0.1 * java.lang.Math.abs(ballDirectionX);
  		} else {
  			ballDirectionY = oldDirectionY + (java.lang.Math.signum(oldDirectionY) * 0.1 * java.lang.Math.abs(ballDirectionX));
  		}
  		currentBallX = bounce.getX() + rem/oldDirectionX * ballDirectionX;
  		currentBallY = bounce.getY() + rem/oldDirectionY * ballDirectionY;
  	}
  	//FLIP_BOTH case
  	if(bd.equals(BouncePoint.BounceDirection.FLIP_BOTH)) {
  		double inX = bounce.getX() - currentBallX;
  		double remX = ballDirectionX - inX;
  		double inY = bounce.getY() - currentBallY;
  		double remY = ballDirectionY - inY;
  		if(remX == 0 && remY == 0) {
  			currentBallX = bounce.getX();
  			currentBallY = bounce.getY();
  		}
  		double oldDirectionX = ballDirectionX;
  		double oldDirectionY = ballDirectionY;
  		ballDirectionX = (oldDirectionX * (-1));
  		ballDirectionY = (oldDirectionY * (-1));
  		currentBallX = bounce.getX() + remX/oldDirectionX * ballDirectionX;
  		currentBallY = bounce.getY() + remY/oldDirectionY * ballDirectionY;
  	}
  }
  
}