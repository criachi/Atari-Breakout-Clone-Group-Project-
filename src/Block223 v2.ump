namespace ca.mcgill.ecse223.block.model;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   
   public Game findGame(String name) {
	  for(Game game : getGames()) {
		  if (game.getName().equals(name)) {
			  return game;
		  }
	  }
	  
	  return null;
  }
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;
   before constructor {
   	if(aUsername == null || aUsername == "") {
   		throw new RuntimeException("The username must be specified. ");
   	}
   }
}

class UserRole {
    before constructor {
   	if (password == null || password == "") {
   		throw new RuntimeException("The player password needs to be specified. ");
    }
   }
   abstract;
   password;
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
	before constructor, setName {
		if(aName == null || aName.length() == 0) {
			throw new RuntimeException("Name cannot be empty.");
		}
	}
	
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 400; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   before constructor, setName {
    if (name == null) {
	  throw new RuntimeException("The name of a game must be specified.");
	}
  }
   Integer nrBlocksPerLevel;
   before constructor, setNrBlocksPerLevel {
    if (nrBlocksPerLevel < 0) {
	  throw new RuntimeException("The number of block per level must be greater than zero.");
	}
  }
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
}

class Block {
   before constructor {
   	if (aRed<0 || aRed>255) {
	  throw new RuntimeException("Red must be between 0 and 255");
	}
	if (aGreen<0 || aGreen>255) {
	  throw new RuntimeException("Green must be between 0 and 255");
	}
	if (aBlue<0 || aBlue>255) {
	  throw new RuntimeException("Blue must be between 0 and 255");
	}
	if (aPoints<1 || aPoints>1000) {
	  throw new RuntimeException("Points must be between 1 and 1000");
    }
   }
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {

	public BlockAssignment findBlockAssignment(int gridHorizontalPosition, int gridVerticalPosition) {
		List<BlockAssignment> blockAssignments = this.getBlockAssignments();
		for(BlockAssignment blockAssignment: blockAssignments) {
			int h = blockAssignment.getGridHorizontalPosition();
			int v = blockAssignment.getGridVerticalPosition();
				if(h == gridHorizontalPosition && v == gridVerticalPosition) {
					return blockAssignment;
				}
		}
		return null;
	}
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
   before constructor, setGridHorizontalPosition, setGridVerticalPosition {
   		if(gridHorizontalPosition <= 0 || gridHorizontalPosition > maxNrHorizontalBlocks()) {
   			throw new RuntimeException("The horizontal position must be between 1 and " + maxNrHorizontalBlocks() + ".");
   		}
   		if(gridVerticalPosition <= 0 || gridVerticalPosition > maxNrVerticalBlocks()) {
   			throw new RuntimeException("The vertical position must be between 1 and " + maxNrVerticalBlocks() + ".");
   		}
   }
   
   public static int maxNrHorizontalBlocks() {
		int max = 375/25;	//I did calculations by hand on the number of blocks that can be placed horizontally
		return max;
	}
  
  public static int maxNrVerticalBlocks() {
	int max = 347/22;
	return max;
  }
  
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   before constructor, setMinBallSpeedX {
    if (minBallSpeedX < 0) {
	  throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
	}
  }
   Integer minBallSpeedY;
   before constructor, setMinBallSpeedY {
    if (minBallSpeedY < 0) {
	  throw new RuntimeException("The minimum speed of the ball must be greater than zero.");
	}
  }
   Double ballSpeedIncreaseFactor;
   before constructor, setBallSpeedIncreaseFactor {
    if (ballSpeedIncreaseFactor < 0) {
	  throw new RuntimeException("The speed increase factor of the ball must be greater than zero.");
	}
  }
   
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
    before constructor, setMaxPaddleLength {
    if (maxPaddleLength < 0 || maxPaddleLength > 400) {
	  throw new RuntimeException("The maximum length of the paddle must be greater than zero and less than equal to 400.");
	}
  }
   Integer minPaddleLength;
    before constructor, setMinPaddleLength {
    if (minPaddleLength < 0) {
	  throw new RuntimeException("The minimum length of the paddle must be greater than zero.");
	}
  }
}
